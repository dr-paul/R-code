 #Ensure you have the following packages installed for R
 library(BiasedUrn)
 library(foreign)
 library(mlogit)

 options(scipen=999)

 #Setting up the data file
 itData = read.csv ("C:/.../Data/File Name.csv", header=TRUE)
 z = itData[,-1:-1] #first column has respondent ID numbers
 # stacking the data (one set per row)

 #Converts the data from Flat (each row is one unique respondent, columns are sets of options to questions, i.e. Q1_A, Q1_B, Q2_A, Q2_B) into Stacked
 alternativeNames = c("X1" , "X2" , "X3" , "X4")
 nAlternatives = length(alternativeNames)
 nBlocks = ncol(z) / nAlternatives
 nAltsPerSet = 5 # Get this value from the first R script
 n = nrow(z)
 nObservations = n * nBlocks
 itMaxDiffData = matrix(as.numeric(t(z)),ncol = nAlternatives,byrow = TRUE, dimnames = list(1:nObservations, alternativeNames))

 #Count analysis for the entire sample and rankings (1=highest)
 counts = apply(itMaxDiffData, 2, mean, na.rm = TRUE)
 ranks = nAlternatives + 1 - rank(counts)
 cbind(Counts = counts, Ranks = ranks)

 #Computing individual-level counts
 id = rep(1:n,rep(nBlocks,n))
 individualCounts = aggregate(itMaxDiffData,list(id),mean, na.rm = TRUE)[,-1]
 round(individualCounts[1:10,],1) #show at data for first 10 respondents

 #Setting up the data for a logit model
 nRows = sum(is.na(itMaxDiffData)) * 2
 longData = matrix(0, nRows,nAlternatives + 3)
 counter = 0
 setCounter = 0
 for (rr in 1:nObservations){
   nAlts = 0
   alternatives = NULL
   respondent = floor(rr/nBlocks) + 1
   for (cc in 1:nAlternatives){
     v = itMaxDiffData[rr,cc]
     if (!is.na(v)){
         nAlts = nAlts + 1
         alternatives[nAlts] = cc
         if (v == 1)
            best = cc
         if (v == -1)
            worst = cc
     }
   }
   setCounter = setCounter + 1
   for (a in 1:nAlts){
      	 counter = counter + 1
         this_a = alternatives[a]
         if (this_a == best)
	    longData[counter,3] = 1
         else if (this_a == worst)
	    longData[counter + nAlts,3] = 1
	 longData[counter, 1] = respondent 
	 longData[counter + nAlts,1] = respondent 
	 longData[counter, 2] = setCounter 
	 longData[counter + nAlts, 2] = setCounter + 1
	 longData[counter,3 + this_a] = 1
	 longData[counter + nAlts,3 + this_a] = -1
   }
   setCounter = setCounter + 1
   counter = counter + nAlts
 }
 longData[1:20,]
 longData = as.data.frame(longData)
 names(longData) = c("ID","Set","Choice",alternativeNames)

 #Estimating the aggregate logit model (assuming all people are the same)
 #logitModel = mlogit(Choice ~ X1+X2+X3+X4 | 0, data = longData, alt.levels = paste(1:nAltsPerSet), shape = "long") 
 #summary(logitModel)

 #Tricked random parameters logit model (in Sawtooth it is known as Hierarchical Bayes)- assumes differences between people can be described by a multivariate normal distribution 
 longData$ID = rep(1:n,rep(nBlocks * 2 * nAltsPerSet,n))
 rpLogitModel = mlogit(Choice ~ X2+X3+X4 | 0, data = longData, alt.levels = paste(1:nAltsPerSet), shape = "long", id="ID", panel = TRUE, rpar = c(X2 = "n", X3 = "n", X4 = "n"), correlation = TRUE)
 summary(rpLogitModel)

 #Estimating the respondent-level logit model
 individualLogit = individualCounts
 stackedID = rep(1:n,rep(nBlocks*2 * nAltsPerSet,n))
 getCoefficients = function(id){c(0,as.numeric(mlogit(Choice ~ X2+X3+X4+X5+X6+X7+X8+X9+X10 | 0, subset = stackedID==id, data = longData, alt.levels = paste(1:nAltsPerSet), shape = "long")$coef))}
 nAlternatives  = 10 # get this value from the first R script
 for (i in 1:n)
   individualLogit[i,] = getCoefficients(i)
  #adding random numbers to break ties
 set.seed(0) # setting the random number seed to enhance comparability
 ranks = nAlternatives + 1 - t(apply(individualLogit + matrix(runif(n * nAlternatives)/100000, n),1,rank)) #ranks
 rankProportions = t(apply(t(ranks),1,table) / n * 100)
 round(rankProportions,1)

 #Choice probabilities
 shares = prop.table(as.matrix(exp(individualLogit)),1)
 round(shares[1:10,]*100,1) #change the 10 to the number of alternatives

 #Average probabilities and their ranks
 aveShare = apply(shares, 2, mean)
 cbind(round(100 * aveShare, 1), Rank = nAlternatives + 1 - rank(aveShare))
